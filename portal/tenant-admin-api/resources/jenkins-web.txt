pipeline {
    agent any
    environment {
        folder = "@folder@"
    }
    stages {
        stage('获取代码') {
            steps {
                sh '''#!/usr/bin/env bash
                echo -e "generate at @date@ by @auth@ \ngit:@git_url@ @git_branch@ @folder@\n.env.@nacos_ns@"
                sudo chmod a+rw ./ -R
                '''
                deleteDir()
                git branch: '@git_branch@', credentialsId: '@git_credential_id@', url: '@git_url@'
            }
        }
        stage('编译') {
            steps {
                sh '''#!/usr/bin/env bash
                pod_id=$(date "+%Y%m%d.%H%M%S")
                echo $pod_id > .pod_id.txt
                cd @folder@
                rm -f yarn.lock
                rm -f package-lock.json

                if [ -f pre_build.sh ]; then
                    echo "===================================="
                    echo "     重要消息:项目存在 @folder@/pre_build.sh"
                    echo "===================================="
                    bash pre_build.sh @nacos_ns@
                fi

                if [ -f build.sh ]; then
                    echo "===================================="
                    echo "     重要消息:项目存在 @folder@/build.sh"
                    echo "===================================="
                    bash build.sh @nacos_ns@
                else
                    yarn
                    yarn build:@nacos_ns@
                fi

                if [ -f post_build.sh ]; then
                    echo "===================================="
                    echo "     重要消息:项目存在 @folder@/post_build.sh"
                    echo "===================================="
                    bash post_build.sh @nacos_ns@
                fi
                '''
            }
        }
        stage('生成镜像') {
            steps {
                sh'''#!/usr/bin/env bash
                read pod_id < .pod_id.txt
                cd @folder@
                if [ ! -f Dockerfile ]; then
                    wget http://saas-demo.nancal.com:8200/app/web.Dockerfile -O Dockerfile
                else
                    echo "===================================="
                    echo "     重要消息:项目存在 @folder@/Dockerfile"
                    echo "===================================="
                fi

                if [ ! -f nginx.conf ]; then
                    wget http://saas-demo.nancal.com:8200/app/web-nginx.conf -O nginx.conf
                else
                    echo "===================================="
                    echo "     重要消息:项目存在 @folder@/nginx.conf"
                    echo "===================================="
                fi

                vpath=`grep ^\\s*VUE_APP_Nginx_VPath=* .env.production`
                vpath=$(echo $vpath | sed 's/ //g' | cut -c 26-)
                if [ ${vpath:0:1} != "/" ]; then
                    vpath="/$vpath";
                fi
                echo "虚拟目录: $vpath (格式应该是: / 或 /admin)"

                # 读取 package.json name
                docker_name=$(get-json-value.py)
                docker_name=$(echo $docker_name | sed 's/\\W/-/g' |  sed 's/_/-/g')

                echo "===================================="
                echo "使用 @folder@/package.json name = $docker_name 做为 docker image_name 以及 k8s svc-name"
                echo "===================================="
                sed -i "s|@vpath|$vpath|g" nginx.conf
                sudo docker build -t images.nancal.com:8000/web/$docker_name:$pod_id .
                '''
            }
        }
        stage('上传镜像') {
            steps {
                sh'''#!/usr/bin/env bash
                read pod_id < .pod_id.txt
                docker_name=$(get-json-value.py --path @folder@)
                docker_name=$(echo $docker_name | sed 's/\\W/-/g' |  sed 's/_/-/g')

                sudo docker push "images.nancal.com:8000/web/$docker_name:$pod_id"
                '''
            }
        }
        stage('K8s部署') {
            steps {
                sh '''#!/usr/bin/env bash
                . /etc/profile
                read pod_id < .pod_id.txt
                cd @folder@

                urlvpath=`grep ^\\s*VUE_APP_Nginx_VPath=* .env.production`
                urlvpath=$(echo $urlvpath | sed 's/ //g' | cut -c 26-)
                if [ $urlvpath != "" ] && [ ${urlvpath:0:1} != "/" ]; then
                    urlvpath="/$urlvpath";
                fi

                echo "k8s url vpath: $urlvpath (应该是 空 或 /admin)"

                if [ ! -f app.yml ]; then
                    wget http://saas-demo.nancal.com:8200/app/web-default.yml -O app.yml
                else
                    echo "===================================="
                    echo "     重要消息:项目存在 @folder@/app.yml"
                    echo "===================================="
                fi
                docker_name=$(get-json-value.py)
                docker_name=$(echo $docker_name | sed 's/\\W/-/g' |  sed 's/_/-/g')

                sed -i "s|@name|$docker_name|g" app.yml
                sed -i "s|@image|images.nancal.com:8000/web/$docker_name:$pod_id|g" app.yml
                sed -i "s|@urlvpath|$urlvpath|g" app.yml
                kubectl apply -f app.yml -n @k8s_ns@

                if [ -n "$urlvpath" ]; then
                    kubectl get configmap nginxconf@nacos_ns@  -o=jsonpath='{.data.saas-@nacos_ns@\\.conf}' > saas-@nacos_ns@.conf
                    set-nginx-config.py --file saas-@nacos_ns@.conf --vpath $urlvpath --externalName $docker_name

                    kubectl delete configmap nginxconf@nacos_ns@ -n default
                    kubectl create configmap nginxconf@nacos_ns@ -n default --from-file saas-@nacos_ns@.conf

                    nginx_pid=`kubectl get pod -n @k8s_ns@ -l app=nginx | sed '1d'| awk '{print $1}'`
                    kubectl -n $ns exec $nginx_pid -- nginx -s reload

                    echo "已重新生成nginx-saas-@nacos_ns@.conf ($urlvpath), 并重启default.nginx！"
                fi

                echo "部署 $docker_name 完成"
                '''
            }
        }
    }
}